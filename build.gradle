/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.0/userguide/tutorial_java_projects.html
 */
buildscript {

    dependencies {
        classpath "mysql:mysql-connector-java:5.1.46"


    }
}

// 3rd party plugin repositories can be configured in settings.gradle
plugins {
	id "war"
	id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "org.flywaydb.flyway" version "5.1.4"
    id "com.avast.gradle.docker-compose" version "0.8.2"
    id "org.sonarqube" version "2.6"
}

//docker environement
if ("$System.env.dockerProfile" !="null")
    ext.dockerProfile = "$System.env.dockerProfile"

if (!hasProperty('dockerProfile'))
    ext.dockerProfile = 'wintoolbox'

println  ">>>> Using docker environement ${dockerProfile}"
apply from: "gradle/profiles/docker/env-${dockerProfile}.gradle"

println "dc_backend_address     >> $dc_backend_address"
println "dc_docker_host         >> $dc_docker_host"
println "dc_docker_cert_path    >> $dc_docker_cert_path"
println "dc_docker_tls_verify   >> $dc_docker_tls_verify"

//Profile
if ("$System.env.buildProfile" !="null")
    ext.buildProfile = "$System.env.buildProfile"

if (!hasProperty('buildProfile'))
    ext.buildProfile = 'local'

println  ">>>> load common config ${buildProfile}"
apply from: "gradle/profiles/profile-common.gradle"
println  ">>>> Using buildProfile ${buildProfile}"
apply from: "gradle/profiles/profile-${buildProfile}.gradle"




apply from:  'gradle/pluginScripts/gretty.plugin'
apply from:  'gradle/flywaydb.gradle'


println "flywaydb  db_url        >> $db_url"
println "flywaydb  db_user       >> $db_user"




configurations {
    testImplementation.extendsFrom compileOnly
}


   
war {
    archiveName = "${rootProject.warName}"
	duplicatesStrategy = 'exclude'
    webInf { from "src/configs/${rootProject.env}" } // adds a file-set to the WEB-INF dir.

}



dependencyManagement {
    applyMavenExclusions false
}




allprojects {



    if ( project == rootProject ) {
        apply from: 'gradle/dockercompose.gradle'
    }

    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
	apply plugin: "jacoco"
	
	
	group = 'org.github.anasoid.demo'
	sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
   

	
   repositories {
        jcenter()
		mavenCentral()
		mavenLocal()

    }
	
	jacoco {
        toolVersion = '0.8.1'
    }

	//lib version



   
   
     checkstyle {

        configFile = rootProject.file('config/checkstyle/google_checks.xml')
        toolVersion "8.7"
        ignoreFailures =true
        maxErrors = 0
        maxWarnings = 0

     }
     pmd {
            consoleOutput = true

        }

    jacocoTestReport {

        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
	onlyIf = {
        true
    }
    doFirst {
        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

check.dependsOn jacocoTestReport
}



ext {
	linkHomepage = 'https://github.com/anasoid/demo-docker-gradle-integration-test-ci'
	linkIssue = 'https://github.com/anasoid/demo-docker-gradle-integration-test-ci/issues'
	linkScmUrl = 'https://github.com/anasoid/demo-docker-gradle-integration-test-ci.git'



}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    executionData = files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}


test {

    if (!project.hasProperty("integrationTest") || ("$integrationTest" != "true") ) {
        println ">> Exclude integration Test "
        useJUnit {
            excludeCategories  "org.github.anasoid.demo.docker.gradle.ci.IntegrationTest"
        }
    }

    // set a system property for the test JVM(s)
    //rest config
    systemProperty "rest.url", "$rest_url"
    systemProperty 'rest.db.url', "$db_url"
    systemProperty 'rest.db.user', "$db_user"
    systemProperty 'rest.db.password', "$db_password"




    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running  test: " + descriptor)
    }


}
// In this section you declare the dependencies for your production and test code
dependencies {

   implementation "mysql:mysql-connector-java:5.1.46"
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0' 
    testCompile 'junit:junit:4.12'
    testImplementation("io.rest-assured:rest-assured:3.1.0")
    testImplementation("io.rest-assured:json-schema-validator:3.1.0")

}

