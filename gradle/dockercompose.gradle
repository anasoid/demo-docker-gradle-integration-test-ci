dockerCompose {
    useComposeFiles = ["${project.projectDir}/src/test/resources/docker/docker-compose.test.yml"] // like 'docker-compose -f <file>'; default is empty
   // environment.put   "BACKEND_ADDRESS", "$project.dc_backend_address" // Pass environment variable to 'docker-compose' for substitution in compose file
    //environment.put  "DOCKER_HOST","$project.dc_docker_host"
   // environment.put  "DOCKER_CERT_PATH", "$project.dc_docker_cert_path"
   // environment.put  "DOCKER_TLS_VERIFY", "$project.dc_docker_tls_verify"
    // startedServices = ['mysql'] // list of services to execute when calling 'docker-compose up' or 'docker-compose pull' (when not specified, all services are executed)
    // scale = [${serviceName1}: 5, ${serviceName2}: 2] // Pass docker compose --scale option like 'docker-compose up --scale serviceName1=5 --scale serviceName2=2'
    // forceRecreate = false // pass '--force-recreate' when calling 'docker-compose up' when set to 'true`
    // buildBeforeUp = true // performs 'docker-compose build' before calling the 'up' command; default is true
    // buildBeforePull = true // performs 'docker-compose build' before calling the 'pull' command; default is true
    // ignorePullFailure = false // when set to true, pass '--ignore-pull-failure' to 'docker-compose pull'
    // ignorePushFailure = false // when set to true, pass '--ignore-push-failure' to 'docker-compose push'
    // pushServices = [] // which services should be pushed, if not defined then upon `composePush` task all defined services in compose file will be pushed (default behaviour)
    // buildAdditionalArgs = ['--force-rm']
    // pullAdditionalArgs = ['--ignore-pull-failures']
    // upAdditionalArgs = ['--no-deps']
    // downAdditionalArgs = ['--some-switch']

    // waitForTcpPorts = true // turns off the waiting for exposed TCP ports opening
    // captureContainersOutput = false // if true, prints output of all containers to Gradle output - very useful for debugging; default is false
    // captureContainersOutputToFile = '/path/to/logFile' // sends output of all containers to a log file

    // stopContainers = true // doesn't call `docker-compose down` - see below the paragraph about reconnecting
    // removeContainers = tru
    // removeImages = "None" // Other accepted values are: "All" and "Local"
    // removeVolumes = true
    // removeOrphans = false // removes containers for services not defined in the Compose file

    // projectName = 'my-project' // allow to set custom docker-compose project name (defaults to a stable name derived from absolute path of the project), set to null to Docker Compose default (directory name)
    // executable = '/path/to/docker-compose' // allow to set the path of the docker-compose executable (useful if not present in PATH)
    // dockerExecutable = '/path/to/docker' // allow to set the path of the docker executable (useful if not present in PATH)
    // dockerComposeWorkingDirectory = '/path/where/docker-compose/is/invoked/from'
    // dockerComposeStopTimeout = java.time.Duration.ofSeconds(20) // time before docker-compose sends SIGTERM to the running containers after the composeDown task has been started

}