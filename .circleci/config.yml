# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    machine: 
      enabled: true
      docker_layer_caching: true

      # specify the version you desire here

      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      buildProfile: test
      dockerProfile : circleci
    
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
          
      - run:
           name: Install Docker Compose
           command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose

      - run:
           name: check docker  container
           command: |
             docker ps -a

      - run:
           name: check docker images
           command: |
             docker images

      - run: ./gradlew dependencies



      # run docker compose!
      - run:
          name: run enviornment test with docker compose
          command: |
            ./gradlew composeup

    # run flywaydb to initialize data!
      - run:
          name: run flywaydb to initialize data
          command: |
            ./gradlew flywaymigrate

    # run tomcat using gretty in backgroud!
      - run:
          name: run tomcat using gretty in backgroud
          command: |
            ./gradlew farmStartWar
          background: true

     # wait server to start and run test!
      - run:
          name:  run test
          command: |
            sleep 10
            ./gradlew check
          no_output_timeout: 1m

    # wait server to start and run test!
      - run:
          name:  Stop environement
          command: |
            ./gradlew farmStop
            ./gradlew composeDown
          when: always

    # check process
      - run:
          name:  check process
          command: |
            ps -ef
          when: always

      - save_cache:
          paths:
          - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
          when: always


       # save tests!
      - run:
          name: Save test results 
          command: |
            mkdir -p ~/reports/
            cp -r ./build/reports ~/reports;
          when: always
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports